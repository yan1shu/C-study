## 1 C++初识
### 1.1  第一个C++程序
#### 1.1.1 创建项目
#### 1.1.2 创建文件
#### 1.1.3 编写代码
#### 1.1.4 运行程序

### 1.2 注释
1. **单行注释**：`// 描述信息` 
2. **多行注释**： `/* 描述信息 */

### 1.3 变量
**作用**：给一段指定的内存空间起名，方便操作这段内存
**语法**：`数据类型 变量名 = 初始值;`
	int a = 10;
> 注意：C++在创建变量时，必须给变量一个初始值，否则会报错

### 1.4  常量
**作用**：用于记录程序中不可更改的数据
C++定义常量两种方式
1. **\#define** 宏常量： `#define 常量名 常量值`
   * ==通常在文件上方定义==，表示一个常量
2. **const**修饰的变量 `const 数据类型 常量名 = 常量值`
   * ==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改
#define day 7
const int month = 12;

### 1.5 关键字
| asm        | do           | if               | return      | typedef  |
| ---------- | ------------ | ---------------- | ----------- | -------- |
| auto       | double       | inline           | short       | typeid   |
| bool       | dynamic_cast | int              | signed      | typename |
| break      | else         | long             | sizeof      | union    |
| case       | enum         | mutable          | static      | unsigned |
| catch      | explicit     | namespace        | static_cast | using    |
| char       | export       | new              | struct      | virtual  |
| class      | extern       | operator         | switch      | void     |
| const      | false        | private          | template    | volatile |
| const_cast | float        | protected        | this        | wchar_t  |
| continue   | for          | public           | throw       | while    |
| default    | friend       | register         | true        |          |
| delete     | goto         | reinterpret_cast | try         |          |

### 1.6 标识符命名规则
**作用**：C++规定给标识符（变量、常量）命名时，有一套自己的规则
* 标识符不能是关键字
* 标识符只能由字母、数字、下划线组成
* 第一个字符必须为字母或下划线
* 标识符中字母区分大小写





## 2 数据类型
C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存

### 2.1 整型
| **数据类型**        | **占用空间**                                    | 取值范围         |
| ------------------- | ----------------------------------------------- | ---------------- |
| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |
| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |
| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |
| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |

### 2.2 sizeof关键字
**语法：** `sizeof( 数据类型 / 变量)`
	cout << "short 类型所占内存空间为： " << sizeof(short) << endl;
	cout << "int 类型所占内存空间为： " << sizeof(int) << endl;

### 2.3 实型（浮点型）
**作用**：用于==表示小数==
1. 单精度float 
2. 双精度double
| **数据类型** | **占用空间** | **有效数字范围** |
| ------------ | ------------ | ---------------- |
| float        | 4字节        | 7位有效数字      |
| double       | 8字节        | 15～16位有效数字 |

### 2.4 字符型
**作用：**字符型变量用于显示单个字符
**语法：**`char ch = 'a';`
> 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号
> 注意2：单引号内只能有一个字符，不可以是字符串
- C和C++中字符型变量只占用==1个字节==。
- 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元

### 2.5 转义字符
**作用：**用于表示一些==不能显示出来的ASCII字符==
现阶段我们常用的转义字符有：` \n  \\  \t`
| **转义字符** | **含义**                                | **ASCII**码值（十进制） |
| ------------ | --------------------------------------- | ----------------------- |
| \a           | 警报                                    | 007                     |
| \b           | 退格(BS) ，将当前位置移到前一列         | 008                     |
| \f           | 换页(FF)，将当前位置移到下页开头        | 012                     |
| **\n**       | **换行(LF) ，将当前位置移到下一行开头** | **010**                 |
| \r           | 回车(CR) ，将当前位置移到本行开头       | 013                     |
| **\t**       | **水平制表(HT)  （跳到下一个TAB位置）** | **009**                 |
| \v           | 垂直制表(VT)                            | 011                     |
| **\\\\**     | **代表一个反斜线字符"\"**               | **092**                 |
| \'           | 代表一个单引号（撇号）字符              | 039                     |
| \"           | 代表一个双引号字符                      | 034                     |
| \?           | 代表一个问号                            | 063                     |
| \0           | 数字0                                   | 000                     |
| \ddd         | 8进制转义字符，d范围0~7                 | 3位8进制                |
| \xhh         | 16进制转义字符，h范围0~9，a~f，A~F      | 3位16进制               |

### 2.6 字符串型
**作用**：用于表示一串字符
**两种风格**
1. **C风格字符串**： `char 变量名[] = "字符串值"`
   	char str1[] = "hello world";
> 注意：C风格的字符串要用双引号括起来
1. **C++风格字符串**：  `string  变量名 = "字符串值"`
   	string str = "hello world";
> 注意：C++风格字符串，需要加入头文件==#include\<string>==

### 2.7 布尔类型 bool
**作用：**布尔数据类型代表真或假的值 
bool类型只有两个值：
* true  --- 真（本质是1）
* false --- 假（本质是0）
**bool类型占==1个字节==大小**

### 2.8 数据的输入
**语法：** `cin >> 变量 `
	//整型输入
	int a = 0;
	cout << "请输入整型变量：" << endl;
	cin >> a;
	cout << a << endl;





## 3 运算符
| **运算符类型** | **作用**                               |
| -------------- | -------------------------------------- |
| 算术运算符     | 用于处理四则运算                       |
| 赋值运算符     | 用于将表达式的值赋给变量               |
| 比较运算符     | 用于表达式的比较，并返回一个真值或假值 |
| 逻辑运算符     | 用于根据表达式的值返回真值或假值       |
### 3.1 算术运算符
| **运算符** | **术语**   | **示例**    | **结果**  |
| ---------- | ---------- | ----------- | --------- |
| +          | 正号       | +3          | 3         |
| -          | 负号       | -3          | -3        |
| +          | 加         | 10 + 5      | 15        |
| -          | 减         | 10 - 5      | 5         |
| *          | 乘         | 10 * 5      | 50        |
| /          | 除         | 10 / 5      | 2         |
| %          | 取模(取余) | 10 % 3      | 1         |
| ++         | 前置递增   | a=2; b=++a; | a=3; b=3; |
| ++         | 后置递增   | a=2; b=a++; | a=3; b=2; |
| --         | 前置递减   | a=2; b=--a; | a=1; b=1; |
| --         | 后置递减   | a=2; b=a--; | a=1; b=2; |

### 3.2 赋值运算符
| **运算符** | **术语** | **示例**   | **结果**  |
| ---------- | -------- | ---------- | --------- |
| =          | 赋值     | a=2; b=3;  | a=2; b=3; |
| +=         | 加等于   | a=0; a+=2; | a=2;      |
| -=         | 减等于   | a=5; a-=3; | a=2;      |
| *=         | 乘等于   | a=2; a*=2; | a=4;      |
| /=         | 除等于   | a=4; a/=2; | a=2;      |
| %=         | 模等于   | a=3; a%2;  | a=1;      |

### 3.3 比较运算符
| **运算符** | **术语** | **示例** | **结果** |
| ---------- | -------- | -------- | -------- |
| ==         | 相等于   | 4 == 3   | 0        |
| !=         | 不等于   | 4 != 3   | 1        |
| <          | 小于     | 4 < 3    | 0        |
| \>         | 大于     | 4 > 3    | 1        |
| <=         | 小于等于 | 4 <= 3   | 0        |
| \>=        | 大于等于 | 4 >= 1   | 1        |

### 3.4 逻辑运算符
| **运算符** | **术语** | **示例** | **结果**                                                 |
| ---------- | -------- | -------- | -------------------------------------------------------- |
| !          | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。             |
| &&         | 与       | a && b   | 如果a和b都为真，则结果为真，否则为假。                   |
| \|\|       | 或       | a || b | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 |





## 4 程序流程结构
C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==
* 顺序结构：程序按顺序执行，不发生跳转
* 选择结构：依据条件是否满足，有选择的执行相应功能
* 循环结构：依据条件是否满足，循环多次执行某段代码
### 4.1 选择结构
#### 4.1.1 if语句
1. 单行格式if语句：`if(条件){ 条件满足执行的语句 }`
   	//注意事项，在if判断语句后面，不要加分号
   	if (score > 600)
   	{
   		cout << "我考上了一本大学！！！" << endl;
   	}
2. 多行格式if语句：`if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };`
	if (score > 600)
	{
		cout << "我考上了一本大学" << endl;
	}
	else
	{
		cout << "我未考上一本大学" << endl;
	}
3. 多条件的if语句：`if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}`
	if (score > 600)
	{
		cout << "我考上了一本大学" << endl;
	}
	else if (score > 500)
	{
		cout << "我考上了二本大学" << endl;
	}
	else if (score > 400)
	{
		cout << "我考上了三本大学" << endl;
	}
	else
	{
		cout << "我未考上本科" << endl;
	}

#### 4.1.2 三目运算符
**作用：** 通过三目运算符实现简单的判断
**语法：**`表达式1 ? 表达式2 ：表达式3`
**解释：**
如果表达式1的值为真，执行表达式2，并返回表达式2的结果；
如果表达式1的值为假，执行表达式3，并返回表达式3的结果。
	//C++中三目运算符返回的是变量,可以继续赋值
	(a > b ? a : b) = 100;

#### 4.1.3 switch语句
**作用：**执行多条件分支语句
switch(表达式)
{
	case 结果1：执行语句;break;
	case 结果2：执行语句;break;
	...
	default:执行语句;break;
}

### 4.2 循环结构
#### 4.2.1 while循环语句
**语法：**` while(循环条件){ 循环语句 }`

#### 4.2.2 do...while循环语句
**语法：** `do{ 循环语句 } while(循环条件);`
**注意：**与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件

#### 4.2.3 for循环语句
**语法：**` for(起始表达式;条件表达式;末尾循环体) { 循环语句; }`
	for (int i = 0; i < 10; i++)
	{
		cout << i << endl;
	}
	
#### 4.2.4 嵌套循环
**作用：** 在循环体中再嵌套一层循环，解决一些实际问题

### 4.3 跳转语句
#### 4.3.1 break语句
**作用:** 用于跳出==选择结构==或者==循环结构==
break使用的时机：
* 出现在switch条件语句中，作用是终止case并跳出switch
* 出现在循环语句中，作用是跳出当前的循环语句
* 出现在嵌套循环中，跳出最近的内层循环语句

#### 4.3.2 continue语句
**作用：**在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环
> 注意：continue并没有使整个循环终止，而break会跳出循环

#### 4.3.3 goto语句
**作用：**可以无条件跳转语句
**语法：** `goto 标记;`
**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置
> 注意：在程序中不建议使用goto语句，以免造成程序流程混乱













## 5 数组
### 5.1 概述
**特点1：**数组中的每个==数据元素都是相同的数据类型==
**特点2：**数组是由==连续的内存==位置组成的

### 5.2 一维数组
#### 5.2.1 一维数组定义方式
一维数组定义的三种方式：
1. ` 数据类型  数组名[ 数组长度 ]; `
2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};`
3. `数据类型  数组名[ ] = { 值1，值2 ...};`
//定义方式1
	//数据类型 数组名[元素个数];
	int score[10];
	//利用下标赋值
	score[0] = 100;
	score[1] = 99;
	score[2] = 85;
//第二种定义方式
	//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};
	//如果{}内不足10个数据，剩余数据用0补全
	int score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };
//定义方式3
	//数据类型 数组名[] =  {值1，值2 ，值3 ...};
	int score3[] = { 100,90,80,70,60,50,40,30,20,10 };
> 总结2：数组中下标是从0开始索引

#### 5.2.2 一维数组数组名
一维数组名称的**用途**：
1. 可以统计整个数组在内存中的长度
2. 可以获取数组在内存中的首地址
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	cout << "整个数组所占内存空间为： " << sizeof(arr) << endl;
	cout << "每个元素所占内存空间为： " << sizeof(arr[0]) << endl;
	cout << "数组的元素个数为： " << sizeof(arr) / sizeof(arr[0]) << endl;
	//2、可以通过数组名获取到数组首地址
	cout << "数组首地址为： " << (int)arr << endl;
	cout << "数组中第一个元素地址为： " << (int)&arr[0] << endl;
	cout << "数组中第二个元素地址为： " << (int)&arr[1] << endl;
> 注意：数组名是常量，不可以赋值
> 总结1：直接打印数组名，可以查看数组所占内存的首地址
>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小

### 5.3 二维数组
二维数组就是在一维数组上，多加一个维度。
#### 5.3.1 二维数组定义方式
二维数组定义的四种方式：
1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `
2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`
3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`
4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`

#### 5.3.2 二维数组数组名
* 查看二维数组所占内存空间
* 获取二维数组首地址
	cout << "二维数组大小： " << sizeof(arr) << endl;
	cout << "二维数组一行大小： " << sizeof(arr[0]) << endl;
	cout << "二维数组元素大小： " << sizeof(arr[0][0]) << endl;
	cout << "二维数组行数： " << sizeof(arr) / sizeof(arr[0]) << endl;
	cout << "二维数组列数： " << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;
	cout << "二维数组首地址：" << arr << endl;
	cout << "二维数组第一行地址：" << arr[0] << endl;
	cout << "二维数组第二行地址：" << arr[1] << endl;
	cout << "二维数组第一个元素地址：" << &arr[0][0] << endl;
	cout << "二维






## 6 函数
### 6.1 概述
**作用：**将一段经常使用的代码封装起来，减少重复代码

### 6.2 函数的定义
函数的定义一般主要有5个步骤：
1、返回值类型 2、函数名3、参数表列4、函数体语句 5、return 表达式
**语法：** 
返回值类型 函数名 （参数列表）
{
       函数体语句
       return表达式
}

### 6.3 函数的调用
**语法：**` 函数名（参数）`
int add(int num1, int num2) 
{
	int sum = num1 + num2;
	return sum;
}
	//调用add函数
	int sum = add(a, b);//调用时的a，b称为实际参数，简称实参
> 总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参

### 6.4 值传递
* 所谓值传递，就是函数调用时实参将数值传入给形参
* 值传递时，==如果形参发生，并不会影响实参==

### **6.5 函数的常见样式**
常见的函数样式有4种
1. 无参无返
2. 有参无返
3. 无参有返
4. 有参有返

### 6.6 函数的声明
**作用：** 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。
*  函数的**声明可以多次**，但是函数的**定义只能有一次**
int max(int a, int b);

### 6.7 函数的分文件编写
**作用：**让代码结构更加清晰
函数分文件编写一般有4个步骤
1. 创建后缀名为.h的头文件  
2. 创建后缀名为.cpp的源文件
3. 在头文件中写函数的声明
4. 在源文件中写函数的定义
//swap.h文件
#include<iostream>
using namespace std;
//实现两个数字交换的函数声明
void swap(int a, int b);
//swap.cpp文件
#include "swap.h"
void swap(int a, int b)
{
	int temp = a;
	a = b;
	b = temp;
}
//main函数文件
#include "swap.h"
int main() {
	int a = 100;
	int b = 200;
	swap(a, b);
	return 0;
}







## 7 指针
### 7.1 指针的基本概念
**指针的作用：** 可以通过指针间接访问内存

### 7.2 指针变量的定义和使用
指针变量定义语法： `数据类型 * 变量名；`
	//指针定义语法： 数据类型 * 变量名 ;
	int * p= &a

### 7.3 指针所占内存空间
> 总结：所有指针类型在32位操作系统下是4个字节

### 7.4 空指针和野指针
**空指针**：指针变量指向内存中编号为0的空间
**用途：**初始化指针变量
**注意：**空指针指向的内存是不可以访问的
	int * p = NULL;
**野指针**：指针变量指向非法的内存空间

### 7.5 const修饰指针
const修饰指针有三种情况:const修饰谁，谁放在名称的后面，谁就不可以改
1. const修饰指针   --- 常量指针
2. const修饰常量   --- 指针常量
3. const即修饰指针，又修饰常量
//const修饰的是指针，指针指向可以改，指针指向的值不可以更改
	const int * p1 = &a; 
	p1 = &b; //正确
	//*p1 = 100;  报错
//const修饰的是常量，指针指向不可以改，指针指向的值可以更改
	int * const p2 = &a;
	//p2 = &b; //错误
	*p2 = 100; //正确
//const既修饰指针又修饰常量
	const int * const p3 = &a;
	//p3 = &b; //错误
	//*p3 = 100; //错误
> 技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量

### 7.6 指针和数组
**作用：**利用指针访问数组中元素

### 7.7 指针和函数
**作用：**利用指针作函数参数，可以修改实参的值
	int a = 10;
	int b = 20;
	swap1(a, b); // 值传递不会改变实参
	swap2(&a, &b); //地址传递会改变实参







## 8 结构体
### 8.1 结构体基本概念
结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型

### 8.2 结构体定义和使用
**语法：**`struct 结构体名 { 结构体成员列表 }；`
通过结构体创建变量的方式有三种：
* struct 结构体名 变量名
* struct 结构体名 变量名 = { 成员1值 ， 成员2值...}
* 定义结构体时顺便创建变量
//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
}stu3; //结构体变量创建方式3 
//结构体变量创建方式1
	struct student stu1; //struct 关键字可以省略
	stu1.name = "张三";
	stu1.age = 18;
	stu1.score = 100;
	cout << "姓名：" << stu1.name << " 年龄：" << stu1.age  << " 分数：" << stu1.score << endl;
//结构体变量创建方式2
	struct student stu2 = { "李四",19,60 };
> 总结1：定义结构体时的关键字是struct，不可省略
> 总结2：创建结构体变量时，关键字struct可以省略
> 总结3：结构体变量利用操作符 ''.''  访问成员

### 8.3 结构体数组
**作用：**将自定义的结构体放入到数组中方便维护
**语法：**` struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }`
```C++
//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
}
int main() {
	//结构体数组
	struct student arr[3]=
	{
		{"张三",18,80 },
		{"李四",19,60 },
		{"王五",20,70 }
	};
}
```

### 8.4 结构体指针
**作用：**通过指针访问结构体中的成员
* 利用操作符 `-> `可以通过结构体指针访问结构体属性
```C++
//结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};
int main() {
 	student stu = { "张三",18,100, };
	student * p = &stu;
	p->score = 80; //指针通过 -> 操作符可以访问成员
	cout << "姓名：" << p->name << " 年龄：" << p->age << " 分数：" << p->score << endl;
}
```

### 8.5 结构体嵌套结构体
**作用：** 结构体中的成员可以是另一个结构体
```C++
//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};
//教师结构体定义
struct teacher
{
    //成员列表
	int id; //职工编号
	string name;  //教师姓名
	int age;   //教师年龄
	struct student stu; //子结构体 学生
};
int main() {
	struct teacher t1;
	t1.id = 10000;
	t1.name = "老王";
	t1.age = 40;
	t1.stu.name = "张三";
	t1.stu.age = 18;
	t1.stu.score = 100;
	cout << "教师 职工编号： " << t1.id << " 姓名： " << t1.name << " 年龄： " << t1.age << endl;
	cout << "辅导学员 姓名： " << t1.stu.name << " 年龄：" << t1.stu.age << " 考试分数： " << t1.stu.score << endl;
}
```

### 8.6 结构体做函数参数 
**作用：**将结构体作为参数向函数中传递
传递方式有两种：
* 值传递
* 地址传递
```C++
//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};
//值传递
void printStudent(student stu )
{
	stu.age = 28;
	cout << "子函数中 姓名：" << stu.name << " 年龄： " << stu.age  << " 分数：" << stu.score << endl;
}
//地址传递
void printStudent2(student *stu)
{
	stu->age = 28;
	cout << "子函数中 姓名：" << stu->name << " 年龄： " << stu->age  << " 分数：" << stu->score << endl;
}
int main() {
	student stu = { "张三",18,100};
	//值传递
	printStudent(stu);
	cout << "主函数中 姓名：" << stu.name << " 年龄： " << stu.age << " 分数：" << stu.score << endl;
	//地址传递
	printStudent2(&stu);
	cout << "主函数中 姓名：" << stu.name << " 年龄： " << stu.age  << " 分数：" << stu.score << endl;
}
```

### 8.7 结构体中 const使用场景
**作用：**用const来防止误操作
```C++
//学生结构体定义
struct student
{
	//成员列表
	string name;  //姓名
	int age;      //年龄
	int score;    //分数
};
//const使用场景
void printStudent(const student *stu) //加const防止函数体中的误操作
{
	//stu->age = 100; //操作失败，因为加了const修饰
	cout << "姓名：" << stu->name << " 年龄：" << stu->age << " 分数：" << stu->score << endl;
}